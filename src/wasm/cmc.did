type CyclesResponse = variant {
  Refunded : record { text; opt nat64 };
  CanisterCreated : principal;
  ToppedUp;
};
type ICPTs = record { e8s : nat64 };
type Result = variant { Ok : CyclesResponse; Err : text };
type TransactionNotification = record {
  to : principal;
  to_subaccount : opt vec nat8;
  from : principal;
  memo : nat64;
  from_subaccount : opt vec nat8;
  amount : ICPTs;
  block_height : nat64;
};
type SetAuthorizedSubnetworkListArgs = record {
  who : opt principal;
  subnets : vec principal;
};
// Account identifier encoded as a 64-byte ASCII hex string.
type AccountIdentifier = text;

type LedgerCanisterInitPayload = record {
    minting_account: AccountIdentifier;
    initial_values: vec record {AccountIdentifier; ICPTs};
    max_message_size_bytes: opt nat64;
    transaction_window: opt Duration;
    archive_options: opt ArchiveOptions;
    send_whitelist: vec principal;
};

type CyclesCanisterInitPayload = record {
    ledger_canister_id: principal;
    governance_canister_id: principal,
    minting_account_id: Option<AccountIdentifier>,
}


service : (CyclesCanisterInitPayload) -> {
  set_authorized_subnetwork_list : (SetAuthorizedSubnetworkListArgs) -> ();
  transaction_notification : (TransactionNotification) -> (Result);
}