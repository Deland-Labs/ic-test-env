type Error = record { code : nat32; message : text };
type Fee = record { rate : nat; rate_decimals : nat8; minimum : nat };
type Metadata = record {  fee : Fee;  decimals : nat8;  name : text;  totalSupply : nat;  symbol : text;};
type TransactionResult = variant { Ok : TransactionResponse; Err : Error };
type TxRecordsResult = variant { Ok : vec TxRecord; Err : Error };
type CommonResult = variant { Ok : bool; Err : Error };
type TokenHolder = variant { None; Account : text; Principal : principal };
type TokenInfo = record {
  owner : principal; allowanceSize : nat;
  cycles : nat64; txCount : nat;
  holders : nat; storages : vec principal;
  feeTo : TokenHolder;
};
type TransactionResponse = record { txId : text; error : opt vec Error };
type TxRecord = variant {
  Approve : record { nat; TokenHolder; TokenHolder; TokenHolder; nat; nat; nat64; nat64; };
  Transfer : record { nat; TokenHolder; TokenHolder; TokenHolder; nat; nat; nat64; nat64; };
};
type TxRecordResult = variant {Ok : TxRecord;  Err : Error;  Forward : principal; };
service : (opt vec nat8, opt vec nat8, text, text, nat8, nat, Fee, opt vec nat8) -> {
  allowance : (text, text) -> (nat) query;
  allowancesOf : (text) -> (vec record { TokenHolder; nat }) query;
  approve : (opt vec nat8, text, nat, opt nat64) -> (TransactionResult);
  balanceOf : (text) -> (nat) query;
  nonceOf : (principal) -> (nat64) query;
  decimals : () -> (nat8) query;
  desc : () -> (vec record { text; text }) query;
  fee : () -> (Fee) query;
  logo : () -> (vec nat8) query;
  meta : () -> (Metadata) query;
  name : () -> (text) query;
  owner : () -> (principal) query;
  setDesc : (vec record { text; text }) -> (CommonResult);
  setFee : (Fee) -> (CommonResult);
  setFeeTo : (text) -> (CommonResult);
  setLogo : (opt vec nat8) -> (CommonResult);
  setOwner : (principal) -> (CommonResult);
  symbol : () -> (text) query;
  tokenInfo : () -> (TokenInfo) query;
  totalSupply : () -> (nat) query;
  transfer : (opt vec nat8, text, nat, opt nat64) -> (TransactionResult);
  transferFrom : (opt vec nat8, text, text, nat, opt nat64) -> (TransactionResult);

  lastTransactions : (nat64) -> (TxRecordsResult) query;
  transactionById : (text) -> (TxRecordResult) query;
  transactionByIndex : (nat) -> (TxRecordResult) query;
}